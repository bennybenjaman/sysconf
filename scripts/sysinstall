#!/usr/bin/env sh

set -e
set -x


command_exists() {
    if command -v $1 > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}


check_privileges() {
    if [ "$(id -u)" != "0" ]; then
        if command_exists 'sudo' ; then
            SUDO="sudo"
        else
            echo "must be root or install sudo"
            exit 1
        fi
    else
        SUDO=""
    fi
}


check_privileges


install_pip() {
    $SUDO python -c "import sys, ssl, os, pkgutil, tempfile, atexit; \
        sys.exit(0) if pkgutil.find_loader('pip') else None; \
        pyexc = 'from urllib.request import urlopen' if sys.version_info[0] == 3 else 'from urllib2 import urlopen'; \
        exec(pyexc); \
        context = ssl._create_unverified_context() if hasattr(ssl, '_create_unverified_context') else None; \
        kw = dict(context=context) if context else {}; \
        req = urlopen('https://bootstrap.pypa.io/get-pip.py', **kw); \
        data = req.read(); \
        f = tempfile.NamedTemporaryFile(suffix='.py'); \
        atexit.register(f.close); \
        f.write(data); \
        f.flush(); \
        print('downloaded %s' % f.name); \
        code = os.system('%s %s' % (sys.executable, f.name)); \
        sys.exit(code);"
}

# ...in case wget/curl are missing
# usage: sh_net_httpfetch <url> [<file>]
# sh_net_httpfetch() {
#     url=$1 dest=$2 python << END
# from __future__ import print_function
# if 1:
#     import os, urllib2, sys
#     url = os.environ['url']
#     dest = os.environ['dest']
#     if not url:
#         sys.exit('usage: sh_net_httpfetch <url> [<file>]')
#     print("getting %s to %s" % (url, dest), file=sys.stderr)
#     if not '://' in url:
#         url = 'http://' + url
#     # try to disable cache
#     req = urllib2.Request(url)
#     req.add_header('Cache-Control', 'max-age=0')
#     req.add_header('Pragma', 'no-cache')
#     url = urllib2.urlopen(req)
#     data = url.read()
#     if dest:
#         f = open(dest, 'w')
#     else:
#         f = sys.stdout
#     with f:
#         f.write(data)
# END
# }


# install_pip() {
#     if type -P pip > /dev/null; then
#         sh_net_httpfetch https://bootstrap.pypa.io/get-pip.py > /tmp/get-pip.py
#         python /tmp/get-pip.py
#         rm /tmp/get-pip.py
#     fi
# }


# Ubuntu / Debian
do_apt() {
    # add chrome ppa http://www.ubuntuupdates.org/ppa/google_chrome
    wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | $SUDO apt-key add -
    $SUDO rm -f /etc/apt/sources.list.d/google.list
    $SUDO sh -c 'echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'

    # add skype ppa http://www.ubuntugeek.com/how-to-install-skype-in-ubuntu-12-04precise.html
    $SUDO apt-add-repository "deb http://archive.canonical.com/ $(lsb_release -sc) partner"

    $SUDO add-apt-repository "deb http://archive.canonical.com/ubuntu $(lsb_release -sc) partner"

    # install all essential packages
    base="msttcorefonts vim build-essential ubuntu-restricted-extras sudo xclip"
    net="curl wget"
    files="tree rar unrar nfs-kernel-server"
    dev="git mercurial colordiff libreadline-dev libncurses*-dev python-dev python3-dev build-essential ack-grep libffi-dev libssl-dev libreadline-dev python-pip python3-pip"
    media="vlc ffmpeg"
    sys="openssh-server screen htop virtualbox xawtv indicator-cpufreq"
    ppa="google-chrome-stable skype"
    $SUDO apt-get update
    $SUDO apt-get install -y $base $net $files $dev $media $sys $ppa
    $SUDO apt-get install -y linux-headers-`uname -r`
    $SUDO apt-get autoremove -y
}


# FreeBSD or SunOS
do_pkg() {
    # FreeBSD
    if echo "$OSTYPE" | grep -i 'freebsd'; then
        $SUDO pkg install -y gcc sudo python tree xclip bash
        return
    fi

    # SunOS
    if echo "$OSTYPE" | grep -i 'solaris'; then
        if ! command_exists 'gcc' ; then
            $SUDO pkg install gcc
        fi
        if ! command_exists 'bash' ; then
            $SUDO pkg install bash
        fi
        if ! command_exists 'python2.7' ; then
            $SUDO pkg install python-27
            $SUDO rm -f /usr/bin/python
            $SUDO ln -s /usr/bin/python2.7 /usr/bin/python
        fi
        # distutils assume cc; if not installed use gcc by creating a symlink
        if ! command_exists 'cc' ; then
            $SUDO ln -s /usr/bin/gcc /usr/bin/cc
        fi
        return
    fi
}


# OSX
do_brew() {
    # install brew
    if ! type -P brew > /dev/null; then
        $SUDO ruby -e "$(curl -fsSkL raw.github.com/mistydemeo/tigerbrew/go/install)"
    fi
    # fix for https://github.com/Homebrew/legacy-homebrew/issues/9953
    $SUDO chown root /usr/local/bin/brew
    $SUDO brew install gcc git vim coreutils
}


do_pkg_add() {
    # OpenBSD
    if echo `uname -a` | grep -i 'openbsd'; then
        export PKG_PATH="http://ftp.openbsd.org/pub/OpenBSD/`uname -r`/packages/`arch -s`/"

        if ! command_exists 'rsync' ; then
            $SUDO pkg_add -I rsync--
        fi
        if ! command_exists 'sudo' ; then
            $SUDO pkg_add -I sudo--
        fi
        if ! command_exists 'bash' ; then
            $SUDO pkg_add -I bash--
        fi
        if ! command_exists 'python' ; then
            if ! command_exists 'python2.7' ; then
                $SUDO pkg_add -I python-2.7.11--
            fi
        fi

        # symlink python
        if ! command_exists 'python' ; then
            $SUDO ln -s /usr/local/bin/python2.7 /usr/local/bin/python
        fi
    fi
}


main() {
    # install pkgs
    if command_exists 'apt-get' ; then
        do_apt
    elif command_exists 'pkg' ; then
        do_pkg
    elif command_exists 'brew' ; then
        do_brew
    elif command_exists 'pkg_add' ; then
        do_pkg_add
    fi

    install_pip

    # install python stuff
    $SUDO python -m pip install --upgrade pip setuptools
}

main
